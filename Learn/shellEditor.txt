一、Shell基础知识
1、Shell脚本区分大小写
2、注释：Bash和TC shell注释语法相同，使用符号"#"标识注释行，Shell会忽略从符号"#"开始到下一个
换行符之间的内容
3、单引号、双引号和反引号
	单引号（''）：在单引号中的所有特殊字符都失去特殊意义，作为普通字符输出
	双引号（""）：在双引号中的特殊字符还具备其所代表的意义
	反引号（``）；在反引号中的字符串会作为命令执行，并返回执行结果
例：USER=root
echo '$USER'		输出字符串$USER
echo "$USER"		输出root
echo `ls`			执行命令ls并返回执行结果
4、前后台运行
前台运行：Shell要等待命令（进程）结束才能恢复自身的运行，下一命令只有等待当前命令执行完毕才能输入
后台运行：Shell无需等待命令（进程）结束就恢复自身的运行，用户可以直接输入执行下一命令，在命令或程
序候命添加符号"&",可将其放到后台运行
 例：gcc myprog.c		在后台执行gcc命令，对myprog.c源程序进行编译
 5、命令执行顺序
 顺序执行：命令之间用分号分隔且分号前后的命令无因果关系
 例：echo hello；pwd;ls 	一次执行三条命令
 有条件执行："&&"和"||"
 &&连接两个命令，前一命令执行成功后才能执行后一命令，相当于逻辑与
 ||链接两个命令，前一命令执行不成功才执行后一命令，相当于逻辑或
 6、指定使用的Shell：如果脚本的前两个字符是"#!"，那么系统会将这两个字符后面的那些字符作为执行改脚本的
 命令解释器的绝对路径名（可指定到任何程序的路径名）。
 例：#!/bin/bash			指定有bash来运行脚本
 7、运行脚本
 通过chmod命令把文件的权限设为可读、可执行，然后直接执行该可执行文件
 chmod u+x 脚本文件名
 ./脚本文件名及其参数
 bash 脚本文件名及其参数			不需要为脚本赋予执行权限
 source 脚本文件名及其参数
 . 脚本文件名及其参数
 
二、重定向：在Linux中，数据流分为3类：数据输入、数据输出和错误输出。相应的每一个进程也都有3个特殊的文件
描述指针：标准输入（文件描述指针为0）、标准输出（指针为1）和标准错误输出（指针为2），有两种方法可以用
来重定向标准输入、标准输出和标准错误输出。
1、管道：将前一个程序的输出作为后一个程序的输入，操作符“|”。语法格式如下
	命令1 | 命令2 [ | 命令3...]
	可以将标准错误输出一起送入管道，命令格式如下：
	命令1 |& 命令2 [ |& 命令3...]
2、I/O重定向：将指令执行的结果重新导出到其他设备或文件（以“>”或“>>”来表示）或是重新导入到其它设
备或文件（以"<"和"<<"来表示），常用输入输出重定向命令格式与执行结果如下：
	命令1 > 文件1			将命令1的输出结果重定向到文件1
	命令1 &> 文件1			将命令1的输出结果和标准错误输出一起重定向到文件1
	命令1 >> 文件1			将命令1的输出结果追加到文件1中
	命令1 2> 文件1			将命令1的标准错误输出的结果重定向到文件1中
	命令1 < 文件1			将文件1作为命令1的标准输入
	命令1 << 字符串1		允许连续输入数据，直到接收到字符串1
例：
1 ls /etc > /etc_list			对/etc目录下的所有文件建立一个清单，并保存到根目录下的etc_list文件中
2 使用cat命令，配合重定向操作，可以直接将数据从键盘录入文件中，例如创建file1.doc文件并录入“hello world！”
输入完毕后先按Enter键（否则最后一行不会被存储），再按Ctrl+c或Ctrl+d结束文件的编辑。
	cat > file1.doc
	hello world!  		//按Enter键
	//按Ctrl+c或Ctrl+d
三、Shell通配符
?：表示任意的单个字符
*：表示人长度的任意字符串
[]：表示匹配放在[]中的字符集中的任意一个字符
{}：将大括号中的字符串以及前导字符串和后继字符串作为匹配条件
		
	